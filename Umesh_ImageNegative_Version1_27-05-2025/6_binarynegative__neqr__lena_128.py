# -*- coding: utf-8 -*-
"""6_BinaryNegative_ NEQR _Lena_128.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LjSQxMrjxkO6KlfsbpW8Ykd33NIZ2PdQ

!pip install qiskit
!pip install qiskit-aer
!pip install qiskit qiskit-aer matplotlib
!pip install pylatexenc
!pip install qiskit qiskit-aer pillow
!pip install qiskit-ibm-runtime
"""

import time
from PIL import Image
import numpy as np
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit_aer import AerSimulator
import matplotlib.pyplot as plt
import os

def int_to_bits(value, num_bits):
    return [int(bit) for bit in bin(value)[2:].zfill(num_bits)]

def negate_pixel(value, bits, offset=0):
    qr = QuantumRegister(bits, "q")
    cr = ClassicalRegister(bits, "c")
    qc = QuantumCircuit(qr, cr)
    binary = int_to_bits(value, bits)
    for j in range(bits):
        if binary[bits - 1 - j] == 1:
            qc.x(qr[offset + j])
    qc.barrier()
    input_circuit = qc.copy()
    for j in range(bits):
        qc.x(qr[offset + j])
    qc.barrier()
    processed_circuit = qc.copy()
    qc.measure(qr[offset:offset + bits], cr[offset:offset + bits])
    final_circuit = qc
    return input_circuit, processed_circuit, final_circuit

def negate_image_from_tiff(image_path, output_dir="output_images"):
    start_time = time.time()

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    try:
        img = Image.open(image_path).convert("L")
    except Exception as e:
        print(f"Error loading image {image_path}: {e}")
        return None, None, None, None, None, None, None

    width, height = img.size
    matrix = [[1 if img.getpixel((c, r)) >= 128 else 0 for c in range(width)] for r in range(height)]

    classical_matrix = [[1 - matrix[r][c] for c in range(width)] for r in range(height)]
    negated_matrix = [[0 for _ in range(width)] for _ in range(height)]
    circuits = []
    pixel_counter = 0

    for r in range(height):
        for c in range(width):
            value = matrix[r][c]
            input_circuit, processed_circuit, final_circuit = negate_pixel(value, 1)
            backend = AerSimulator()
            job = backend.run(final_circuit, shots=10)
            counts = job.result().get_counts()
            bitstring = list(counts.keys())[0]
            negated_matrix[r][c] = int(bitstring, 2)
            if pixel_counter < 5:
                circuits.append(("binary", input_circuit, processed_circuit, final_circuit))
                pixel_counter += 1

    mse = sum((negated_matrix[r][c] - classical_matrix[r][c]) ** 2 for r in range(height) for c in range(width)) / (width * height)

    neg_img = Image.new("L", (width, height))
    for r in range(height):
        for c in range(width):
            pixel_value = 255 if negated_matrix[r][c] == 1 else 0
            neg_img.putpixel((c, r), pixel_value)

    orig_path = os.path.join(output_dir, "binary_original.png")
    neg_path = os.path.join(output_dir, "binary_negated.png")
    orig_img = Image.new("L", (width, height))
    for r in range(height):
        for c in range(width):
            orig_img.putpixel((c, r), 255 if matrix[r][c] else 0)
    orig_img.save(orig_path)
    neg_img.save(neg_path)

    exec_time = time.time() - start_time

    return matrix, negated_matrix, circuits, orig_img, neg_img, mse, exec_time

if __name__ == "__main__":
    image_path = "Lenna_128_binary.tiff"
    result = negate_image_from_tiff(image_path)
    matrix, negated_matrix, circuits, orig_img, neg_img, mse, exec_time = result

    print("Top-left 2x2 Binary Matrix Sample:")
    for row in matrix[:2]:
        print(row[:2])
    print("Top-left 2x2 Negated Matrix Sample:")
    for row in negated_matrix[:2]:
        print(row[:2])

    print(f"MSE between Quantum and Classical Negation: {mse}")
    print(f"Execution Time: {exec_time:.2f} seconds")

    if circuits:
        for i, circuit in enumerate(circuits):
            print(f"\nSample Input Circuit {i+1}:")
            print(circuit[1].draw(output="text"))
            print(f"\nSample Processed Circuit {i+1}:")
            print(circuit[2].draw(output="text"))
            print(f"\nSample Final Circuit {i+1}:")
            print(circuit[3].draw(output="text"))

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.imshow(orig_img, cmap='gray')
    plt.title("Original Binary Image")
    plt.axis("off")
    plt.subplot(1, 2, 2)
    plt.imshow(neg_img, cmap='gray')
    plt.title("Quantum Negated")
    plt.axis("off")
    plt.tight_layout()
    plt.show()