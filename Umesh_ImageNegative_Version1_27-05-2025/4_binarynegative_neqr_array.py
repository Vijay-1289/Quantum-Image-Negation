# -*- coding: utf-8 -*-
"""4_BinaryNegative_NEQR_Array.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OiXYXDtRiulBEw8otuIvUWteWrkXWeL2

!pip install qiskit
!pip install qiskit-aer
!pip install qiskit qiskit-aer matplotlib
!pip install pylatexenc
!pip install qiskit qiskit-aer pillow
!pip install qiskit-ibm-runtime
"""
import numpy as np
import time
from qiskit import QuantumCircuit, transpile, QuantumRegister, ClassicalRegister
from qiskit_aer import AerSimulator
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

# --- Helper Functions ---
def array_to_int(bit_array):
    return int("".join(str(bit) for bit in bit_array), 2)

def int_to_bits(value, num_bits):
    return [int(bit) for bit in bin(value)[2:].zfill(num_bits)]

# --- Quantum Binary Image Negation ---
def negate_binary_image_quantum(binary_image_flat):
    start_time = time.time()

    num_pixels = len(binary_image_flat)
    if num_pixels == 0:
        return [], None, 0.0, 0.0

    qr = QuantumRegister(num_pixels, "pixel")
    cr = ClassicalRegister(num_pixels, "measurement")
    qc_original = QuantumCircuit(qr, cr)

    for i in range(num_pixels):
        if binary_image_flat[i] == 1:
            qc_original.x(qr[i])
    qc_original.barrier()

    print("--- Quantum Circuit for Original Binary Input (First 5 Qubits) ---")
    print(qc_original.draw(output="text"))

    qc = QuantumCircuit(qr, cr)
    for i in range(num_pixels):
        if binary_image_flat[i] == 1:
            qc.x(qr[i])
    qc.barrier()
    for i in range(num_pixels):
        qc.x(qr[i])
    qc.barrier()
    qc.measure(qr, cr)

    print("--- Binary Image Negation Quantum Circuit (First 5 Qubits) ---")
    print(qc.draw(output="text"))

    simulator = AerSimulator()
    transpiled_qc = transpile(qc, simulator)
    job = simulator.run(transpiled_qc, shots=10240)
    result = job.result()
    counts = result.get_counts(transpiled_qc)

    most_frequent_state_str = max(counts, key=counts.get)
    negated_image_flat = [int(bit) for bit in most_frequent_state_str][::-1]

    # Classical negation for MSE
    classical_negated = [1 - bit for bit in binary_image_flat]
    quantum_mse = np.mean((np.array(classical_negated) - np.array(negated_image_flat)) ** 2)

    hist_fig = plot_histogram(counts)

    execution_time = time.time() - start_time
    return negated_image_flat, hist_fig, quantum_mse, execution_time

# --- Main Execution Example ---
if __name__ == "__main__":
    binary_image = [1, 0, 1, 0]
    print(f"\nOriginal Binary Image: {binary_image}")
    negated_binary, binary_hist_fig, mse, exec_time = negate_binary_image_quantum(binary_image)
    print(f"Negated Binary Image (Quantum): {negated_binary}")
    print(f"MSE with Classical Negation: {mse:.6f}")
    print(f"Execution Time: {exec_time:.2f} seconds")

    if binary_hist_fig:
        binary_hist_fig.suptitle("Binary Image Negation Measurement Counts")
        binary_hist_fig.savefig("binary_negation_histogram.png")
        print("Saved binary negation histogram to binary_negation_histogram.png")
